// <auto-generated />
using System;
using Editoria.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Editoria.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129124229_addAndSeedTables")]
    partial class addAndSeedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Editoria.Models.Entities.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementId"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("IssueId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            AdvertisementId = 1,
                            Cost = 100.50m,
                            IssueId = 1,
                            Text = "Скидка 50% на все товары! Только сегодня.",
                            Type = "Баннер"
                        },
                        new
                        {
                            AdvertisementId = 2,
                            Cost = 200.00m,
                            IssueId = 1,
                            Text = "Подпишитесь на нашу рассылку и получите подарок!",
                            Type = "Всплывающее окно"
                        },
                        new
                        {
                            AdvertisementId = 3,
                            Cost = 500.00m,
                            IssueId = 2,
                            Text = "Откройте для себя мир новых возможностей с нашим продуктом.",
                            Type = "Видео"
                        },
                        new
                        {
                            AdvertisementId = 4,
                            Cost = 50.00m,
                            IssueId = 2,
                            Text = "Купите сейчас и получите бесплатную доставку.",
                            Type = "Текст"
                        },
                        new
                        {
                            AdvertisementId = 5,
                            Cost = 120.00m,
                            IssueId = 3,
                            Text = "Лучшие предложения дня — не пропустите!",
                            Type = "Боковая панель"
                        },
                        new
                        {
                            AdvertisementId = 6,
                            Cost = 1000.00m,
                            IssueId = 3,
                            Text = "Эксклюзивное предложение! Только для первых 100 клиентов.",
                            Type = "На всю страницу"
                        },
                        new
                        {
                            AdvertisementId = 7,
                            Cost = 150.75m,
                            IssueId = 4,
                            Text = "Успейте купить! Акция заканчивается через 3 дня.",
                            Type = "Баннер"
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("AuthorComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IssueId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            AuthorComment = "Статья рассматривает современные политические процессы, их влияние на общество и важность критического мышления в условиях информационной эпохи.",
                            AuthorId = 1,
                            CategoryId = 1,
                            ImageUrl = "/images/articles/politika.jpg",
                            IssueId = 1,
                            PublicationDate = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Политика — это неотъемлемая часть жизни каждого общества, определяющая его развитие, экономическое положение и социальные процессы. В современном мире политические решения принимаются под влиянием множества факторов: экономических интересов, идеологических убеждений и международных отношений. Рост цифровых технологий и социальных сетей привел к тому, что информация распространяется мгновенно, а политические процессы становятся все более открытыми, но при этом возрастают и риски дезинформации, манипуляции и политической поляризации. Влияние политики ощущается повсеместно — от международных конфликтов и торговых войн до принятия законов, регулирующих повседневную жизнь граждан. В таких условиях важно критически оценивать информацию, разбираться в механизмах принятия решений и осознавать,     как политика влияет на каждого из нас.",
                            Title = "Современная политика"
                        },
                        new
                        {
                            ArticleId = 2,
                            AuthorComment = "Аниме Наруто вдохновляет многих зрителей, пропагандируя важность дружбы и силы духа в преодолении трудностей.",
                            AuthorId = 2,
                            CategoryId = 3,
                            ImageUrl = "/images/articles/naruto.webp",
                            IssueId = 1,
                            PublicationDate = new DateTime(2024, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Наруто — это культовое японское аниме, которое стало знаковым не только для поклонников японской культуры, но и для широкой аудитории по всему миру. История рассказывает о мальчике по имени Наруто Узумаке, который мечтает стать Хокаге, сильнейшим ниндзя своей деревни. Сюжет не только захватывает своим экшеном, но и затрагивает важные философские вопросы, такие как борьба за признание, ценность дружбы и преданности, а также то, что настоящая сила заключается не в физической мощи, а в решимости идти вперёд, несмотря на трудности. Аниме также прекрасно сочетает элементы боевых искусств и магии, что делает его одним из самых успешных проектов в истории японской анимации.",
                            Title = "Наруто: философия силы"
                        },
                        new
                        {
                            ArticleId = 3,
                            AuthorComment = "Шилдт — классика, почему бы и нет. Но C# уже далеко ушел, лучше сразу на ASP.NET Core смотреть. Для базы полезно, главное — не зависнуть в теории на год",
                            AuthorId = 3,
                            CategoryId = 2,
                            ImageUrl = "/images/articles/shildt.png",
                            IssueId = 2,
                            PublicationDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Если вы хотите разобраться в C#,книга (C# 4.0. Полное руководство | Шилдт Герберт) станет вашим надежным проводником в мир этого мощного языка программирования. Простым и понятным языком автор объясняет ключевые концепции C#, начиная от основ синтаксиса и заканчивая продвинутыми темами вроде объектно-ориентированного программирования, работы с коллекциями, многопоточности и LINQ. Шилдт детально рассматривает работу с делегатами, событиями и асинхронным программированием, помогая читателю не только понять теорию, но и применить знания на практике. Книга подойдет как новичкам, так и разработчикам, желающим укрепить свои знания в C#.",
                            Title = "C# для начинающих: Лучшая книга"
                        },
                        new
                        {
                            ArticleId = 4,
                            AuthorComment = "Статья о том, как поддерживать здоровье в условиях современного мира, сочетая физическую активность, правильное питание и заботу о ментальном состоянии.",
                            AuthorId = 4,
                            CategoryId = 6,
                            ImageUrl = "/images/articles/health.avif",
                            IssueId = 2,
                            PublicationDate = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "В условиях быстрого ритма жизни, стресса и экологии, которая оставляет желать лучшего, забота о здоровье становится важнейшей задачей. Современные исследования показывают, что ключевыми факторами долголетия являются правильное питание, физическая активность и психологическое благополучие. Однако важно учитывать не только физическое состояние, но и ментальное здоровье: хронический стресс, недосып и эмоциональное выгорание могут привести к серьезным заболеваниям. Для поддержания здоровья необходимо соблюдать баланс: включать в рацион больше натуральных продуктов, заниматься спортом хотя бы 30 минут в день и уделять время отдыху. Также не стоит игнорировать профилактические осмотры у врачей — ранняя диагностика помогает избежать множества проблем. Современная медицина предоставляет множество возможностей для поддержания здоровья, но многое зависит и от осознанного отношения к своему образу жизни.",
                            Title = "Важность здоровья"
                        },
                        new
                        {
                            ArticleId = 5,
                            AuthorComment = "Многие разработчики C# даже не догадываются, как работает CLR. Эта книга помогает понять, что происходит под капотом .NET и как использовать его возможности по максимуму.",
                            AuthorId = 5,
                            CategoryId = 2,
                            ImageUrl = "/images/articles/rihter.jpg",
                            IssueId = 2,
                            PublicationDate = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "CLR via C# — это фундаментальный труд, который помогает разработчикам глубже понять, как работает .NET под капотом. Автор, Джеффри Рихтер, детально объясняет внутреннюю архитектуру Common Language Runtime (CLR), управление памятью, работу сборщика мусора, многопоточность и многое другое.",
                            Title = "C# для продвинутых: Лучшая книга"
                        },
                        new
                        {
                            ArticleId = 6,
                            AuthorComment = "В статье рассматриваются проблемы современной образовательной системы и важность непрерывного обучения в быстро меняющемся мире.",
                            AuthorId = 6,
                            CategoryId = 7,
                            ImageUrl = "/images/articles/education.jpg",
                            IssueId = 3,
                            PublicationDate = new DateTime(2024, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Образование играет ключевую роль в развитии личности и общества. Однако в современном мире система обучения сталкивается с множеством вызовов: быстрое развитие технологий, нехватка практических навыков у выпускников и устаревшие методики преподавания. Сегодня всё больше людей обращают внимание на альтернативные форматы обучения, такие как онлайн-курсы, самообразование и специализированные программы. Важную роль играют навыки, которые выходят за рамки традиционных дисциплин: критическое мышление, умение работать с информацией и цифровая грамотность. Система образования должна адаптироваться к новым реалиям, интегрируя современные технологии и ориентируясь на потребности рынка труда. Главное — понимать, что обучение не заканчивается после школы или университета, а продолжается на протяжении всей жизни.",
                            Title = "Современное образование"
                        },
                        new
                        {
                            ArticleId = 7,
                            AuthorComment = "Detroit: Become Human задаёт важные вопросы о будущем технологий и этике искусственного интеллекта, создавая уникальный опыт для игроков.",
                            AuthorId = 7,
                            CategoryId = 8,
                            ImageUrl = "/images/articles/detroit_photo.webp",
                            IssueId = 4,
                            PublicationDate = new DateTime(2024, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Detroit: Become Human — это интерактивная драма и приключенческая игра, разработанная студией Quantic Dream. Игра разворачивается в будущем, где андроиды начинают обретать сознание и задаваться вопросами о своей роли в обществе. История фокусируется на трёх персонажах: андроиде-слуге Каре, андроиде-полицейском Конноре и андроиде-революционере Маркусе, которые оказываются втянутыми в борьбу за свободу и равенство.В игре принимаются важнейшие моральные решения, которые влияют на развитие событий, что делает каждый проход уникальным. Визуальный стиль игры впечатляет, а сюжет задаёт вопросы о природе человечности, моральных дилеммах и том, как мы относимся к технологиям, которые создаём.",
                            Title = "Detroit: Become Human — наше будущее будущее"
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ArticleId = 1,
                            TagId = 2
                        },
                        new
                        {
                            ArticleId = 2,
                            TagId = 3
                        },
                        new
                        {
                            ArticleId = 2,
                            TagId = 4
                        },
                        new
                        {
                            ArticleId = 3,
                            TagId = 5
                        },
                        new
                        {
                            ArticleId = 3,
                            TagId = 7
                        },
                        new
                        {
                            ArticleId = 4,
                            TagId = 6
                        },
                        new
                        {
                            ArticleId = 5,
                            TagId = 5
                        },
                        new
                        {
                            ArticleId = 5,
                            TagId = 7
                        },
                        new
                        {
                            ArticleId = 6,
                            TagId = 7
                        },
                        new
                        {
                            ArticleId = 7,
                            TagId = 8
                        },
                        new
                        {
                            ArticleId = 7,
                            TagId = 9
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Biography = "Алексей Иванов — опытный журналист с более чем 10-летним стажем работы в различных СМИ. Он освещал важные политические события, а также занимается аналитическими расследованиями. Алексей — автор нескольких книг и статей, которые стали знаковыми в своей области.",
                            DateOfBirth = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexey.ivanov@example.com",
                            Name = "Алексей",
                            Phone = "123-456-7890",
                            Surname = "Иванов",
                            WorkExperience = "Работа в газете 'Вести' (2008-2015), журнал 'Мир новостей' (2016-2020), автор статей на различные темы."
                        },
                        new
                        {
                            AuthorId = 2,
                            Biography = "Мария Петрова — редактор с сильными навыками работы с контентом и журналистскими расследованиями. Она активно сотрудничает с ведущими СМИ и ведет образовательные курсы по редактированию. Мария также является экспертом в области цифровых медиа и новых форматов журналистики.",
                            DateOfBirth = new DateTime(1990, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria.petrova@example.com",
                            Name = "Мария",
                            Phone = "234-567-8901",
                            Surname = "Петрова",
                            WorkExperience = "Опыт работы в интернет-издании 'ТехноНовости' (2015-2018), автор статей в журнале 'Бизнес и технологии' (2019-2021)."
                        },
                        new
                        {
                            AuthorId = 3,
                            Biography = "Иван Сидоров — опытный редактор с фокусом на научные и технические публикации. Он работает с высококвалифицированными экспертами в области технологий и науки, обеспечивая точность и ясность материалов. Иван также активно участвует в редакторских советах научных журналов и конференций.",
                            DateOfBirth = new DateTime(1985, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ivan.sidorov@example.com",
                            Name = "Иван",
                            Phone = "345-678-9012",
                            Surname = "Сидоров",
                            WorkExperience = "Работа в журнале 'Наука и технологии' (2010-2017), редактор в научном отделе газеты 'Техник'."
                        },
                        new
                        {
                            AuthorId = 4,
                            Biography = "Елена Кузнецова — журналист и редактор, специализирующаяся на культурных событиях и социальных вопросах. Она активно освещает темы, связанные с современным искусством, общественными движениями и правами человека. Елена также организует общественные проекты, направленные на развитие культурных инициатив.",
                            DateOfBirth = new DateTime(1992, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elena.kuznetsova@example.com",
                            Name = "Елена",
                            Phone = "456-789-0123",
                            Surname = "Кузнецова",
                            WorkExperience = "Опыт работы в журнале 'Культура и искусство' (2014-2018), автор статей в новостном портале 'Свет культуры'."
                        },
                        new
                        {
                            AuthorId = 5,
                            Biography = "Дмитрий Смирнов — редактор с опытом работы в новостных и политических изданиях. Он специализируется на анализе политических событий и подготовке репортажей с горячих точек. Дмитрий также активно работает с экспертами и политическими аналитиками для создания глубоких и объективных материалов.",
                            DateOfBirth = new DateTime(1988, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmitry.smirnov@example.com",
                            Name = "Дмитрий",
                            Phone = "567-890-1234",
                            Surname = "Смирнов",
                            WorkExperience = "Работа в газете 'Политика сегодня' (2012-2017), редактор в новостном агентстве 'Мир сегодня'."
                        },
                        new
                        {
                            AuthorId = 6,
                            Biography = "Ольга Фёдорова — начинающий редактор с большим потенциалом и интересом к культурным и образовательным темам. Она активно участвует в создании контента, освещающего важные события в сфере образования и культуры. Ольга также стремится развивать свои навыки в области журналистских расследований и аналитики.",
                            DateOfBirth = new DateTime(1995, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "olga.fedorova@example.com",
                            Name = "Ольга",
                            Phone = "678-901-2345",
                            Surname = "Фёдорова",
                            WorkExperience = "Работа в стартап-издании 'Культурная эволюция' (2017-2020)."
                        },
                        new
                        {
                            AuthorId = 7,
                            Biography = "Сергей Михайлов — эксперт по экономическим и политическим темам, работающий в крупных новостных агентствах. Он анализирует ключевые экономические тренды и политические процессы, предлагая экспертные оценки и прогнозы. Сергей также ведет лекции и семинары для профессионалов в области журналистики и аналитики.",
                            DateOfBirth = new DateTime(1983, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.mikhailov@example.com",
                            Name = "Сергей",
                            Phone = "789-012-3456",
                            Surname = "Михайлов",
                            WorkExperience = "Работа в агентстве 'Новости России' (2009-2014), автор статей в международном новостном агентстве 'World News'."
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Новости о политике",
                            IsActive = true,
                            Name = "Политика",
                            Priority = 5
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Новости о  разработке ПО, искусственном интеллекте и новых IT-трендах",
                            IsActive = true,
                            Name = "Программирование",
                            Priority = 5
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Новости о культуре и искусстве",
                            IsActive = true,
                            Name = "Культура",
                            Priority = 3
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Спортивные события и новости",
                            IsActive = false,
                            Name = "Спорт",
                            Priority = 4
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Новости технологий и инноваций",
                            IsActive = false,
                            Name = "Технологии",
                            Priority = 4
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Новости о здоровье и медицинских исследованиях",
                            IsActive = true,
                            Name = "Здоровье",
                            Priority = 3
                        },
                        new
                        {
                            CategoryId = 7,
                            Description = "Новости образования и науки",
                            IsActive = true,
                            Name = "Образование",
                            Priority = 2
                        },
                        new
                        {
                            CategoryId = 8,
                            Description = "Игровые новости",
                            IsActive = true,
                            Name = "Компьютерные игры",
                            Priority = 5
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.Editor", b =>
                {
                    b.Property<int>("EditorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EditorId"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EditorId");

                    b.ToTable("Editors");

                    b.HasData(
                        new
                        {
                            EditorId = 1,
                            Biography = "Анна Иванова — опытный редактор с многолетним стажем работы в различных изданиях. Она специализируется на редактуре материалов по вопросам политики и международных отношений. Анна участвовала в создании множества успешных проектов и редакционных материалов, известных на региональном уровне.",
                            DateOfBirth = new DateTime(1985, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anna.ivanova@example.com",
                            Name = "Анна",
                            Phone = "123-456-7890",
                            Surname = "Иванова",
                            WorkExperience = "Работа в редакции газеты 'Молодёжный вестник' (2008-2015), в журнале 'Женская точка зрения' (2016-2021)."
                        },
                        new
                        {
                            EditorId = 2,
                            Biography = "Борис Смирнов — опытный редактор в области политики и экономики. Он работал в крупнейших политических изданиях, освещая важнейшие события в экономике и политике. Борис также автор ряда аналитических статей и материалов, которые стали основой для дискуссий в экспертных кругах.",
                            DateOfBirth = new DateTime(1980, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "boris.smirnov@example.com",
                            Name = "Борис",
                            Phone = "234-567-8901",
                            Surname = "Смирнов",
                            WorkExperience = "Опыт работы в газете 'Политика сегодня' (2006-2015), редактор в журнале 'Экономика и бизнес' (2016-2020)."
                        },
                        new
                        {
                            EditorId = 3,
                            Biography = "Виктор Кузнецов — редактор с опытом работы в области культуры и искусства. Он является экспертам в области театра и изобразительного искусства, и его статьи об этих темах пользовались большой популярностью. Виктор также активно участвует в культурных проектах и организует мероприятия для художников и критиков.",
                            DateOfBirth = new DateTime(1990, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "victor.kuznetsov@example.com",
                            Name = "Виктор",
                            Phone = "345-678-9012",
                            Surname = "Кузнецов",
                            WorkExperience = "Работа в журнале 'Культура и искусство' (2012-2018), редактор в культурном отделе газеты 'Новости культуры'."
                        },
                        new
                        {
                            EditorId = 4,
                            Biography = "Галина Петрова — редактор с опытом работы в сфере здравоохранения и экологии. Она специализируется на освещении экологических проблем и вопросов здравоохранения в современных условиях. Галина активно занимается развитием экологических программ и общественных инициатив в сфере охраны природы.",
                            DateOfBirth = new DateTime(1987, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "galina.petrova@example.com",
                            Name = "Галина",
                            Phone = "456-789-0123",
                            Surname = "Петрова",
                            WorkExperience = "Работа в журнале 'Зеленая планета' (2010-2016), редактор в отделе экологии газеты 'Здоровье и жизнь'."
                        },
                        new
                        {
                            EditorId = 5,
                            Biography = "Дмитрий Сидоров — журналист и редактор с многолетним стажем работы в области науки. Он активно участвует в популяризации науки и технологий, освещая самые актуальные достижения в этих областях. Дмитрий является автором многочисленных научных публикаций и работ в области информатики и медицины.",
                            DateOfBirth = new DateTime(1984, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmitriy.sidorov@example.com",
                            Name = "Дмитрий",
                            Phone = "567-890-1234",
                            Surname = "Сидоров",
                            WorkExperience = "Опыт работы в журнале 'Наука и технологии' (2009-2017), редактор в новостном агентстве 'Мир науки'."
                        },
                        new
                        {
                            EditorId = 6,
                            Biography = "Екатерина Соболева — молодой редактор с интересом к образовательной тематике. Она увлечена развитием цифрового образования и освещением новых подходов в обучении. Екатерина активно работает с образовательными проектами и занимается разработкой курсов для онлайн-образования.",
                            DateOfBirth = new DateTime(1993, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ekaterina.soboleva@example.com",
                            Name = "Екатерина",
                            Phone = "678-901-2345",
                            Surname = "Соболева",
                            WorkExperience = "Работа в онлайн-издании 'Образование будущего' (2015-2019). Начинающий редактор в проекте 'Образование и технологии'."
                        },
                        new
                        {
                            EditorId = 7,
                            Biography = "Жанна Николаева — редактор и журналист, специализирующаяся на новостях о жизни города. Она известна своими репортажами о социальных проблемах и городских инициативах. Жанна активно работает с городской администрацией и местными НКО для решения актуальных вопросов жизни в городе.",
                            DateOfBirth = new DateTime(1991, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zhanna.nikolaeva@example.com",
                            Name = "Жанна",
                            Phone = "789-012-3456",
                            Surname = "Николаева",
                            WorkExperience = "Работа в газете 'Городские новости' (2014-2019), редактор новостного отдела."
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"));

                    b.Property<int>("Circulation")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NewspaperId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IssueId");

                    b.HasIndex("NewspaperId");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            IssueId = 1,
                            Circulation = 10000,
                            Information = "Новости Москвы",
                            IsActive = true,
                            NewspaperId = 1,
                            PublicationDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IssueId = 2,
                            Circulation = 8000,
                            Information = "Современные тренды в программировании",
                            IsActive = true,
                            NewspaperId = 2,
                            PublicationDate = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IssueId = 3,
                            Circulation = 4000,
                            Information = "Новые технологии",
                            IsActive = true,
                            NewspaperId = 3,
                            PublicationDate = new DateTime(2024, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IssueId = 4,
                            Circulation = 3500,
                            Information = "Новости села",
                            IsActive = true,
                            NewspaperId = 4,
                            PublicationDate = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IssueId = 5,
                            Circulation = 6700,
                            Information = "Искусство и культура",
                            IsActive = true,
                            NewspaperId = 5,
                            PublicationDate = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IssueId = 6,
                            Circulation = 3300,
                            Information = "Научные открытия",
                            IsActive = true,
                            NewspaperId = 6,
                            PublicationDate = new DateTime(2024, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IssueId = 7,
                            Circulation = 5000,
                            Information = "Спортивные события",
                            IsActive = true,
                            NewspaperId = 7,
                            PublicationDate = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.Newspaper", b =>
                {
                    b.Property<int>("NewspaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewspaperId"));

                    b.Property<int>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewspaperId");

                    b.HasIndex("EditorId")
                        .IsUnique();

                    b.ToTable("Newspapers");

                    b.HasData(
                        new
                        {
                            NewspaperId = 1,
                            EditorId = 1,
                            Name = "Городские новости",
                            Region = "Москва",
                            Type = "Ежедневная"
                        },
                        new
                        {
                            NewspaperId = 2,
                            EditorId = 2,
                            Name = "Бизнес-обозрение",
                            Region = "Санкт-Петербург",
                            Type = "Еженедельная"
                        },
                        new
                        {
                            NewspaperId = 3,
                            EditorId = 3,
                            Name = "Технологический вестник",
                            Region = "Новосибирск",
                            Type = "Ежемесячная"
                        },
                        new
                        {
                            NewspaperId = 4,
                            EditorId = 4,
                            Name = "Сельская жизнь",
                            Region = "Краснодар",
                            Type = "Еженедельная"
                        },
                        new
                        {
                            NewspaperId = 5,
                            EditorId = 5,
                            Name = "Культура и искусство",
                            Region = "Казань",
                            Type = "Ежемесячная"
                        },
                        new
                        {
                            NewspaperId = 6,
                            EditorId = 6,
                            Name = "Наука сегодня",
                            Region = "Екатеринбург",
                            Type = "Ежемесячная"
                        },
                        new
                        {
                            NewspaperId = 7,
                            EditorId = 7,
                            Name = "Мир спорта",
                            Region = "Сочи",
                            Type = "Еженедельная"
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Description = "Без описания",
                            Name = "Политика",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 2,
                            Description = "Без описания",
                            Name = "Медиа и информация",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 3,
                            Description = "Без описания",
                            Name = "Аниме",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 4,
                            Description = "Без описания",
                            Name = "Философия",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 5,
                            Description = "Без описания",
                            Name = "Программирование",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 6,
                            Description = "Без описания",
                            Name = "Здоровье",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 7,
                            Description = "Без описания",
                            Name = "Образование",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 8,
                            Description = "Без описания",
                            Name = "Игры",
                            Popularity = 0
                        },
                        new
                        {
                            TagId = 9,
                            Description = "Без описания",
                            Name = "Будущее технологий",
                            Popularity = 0
                        });
                });

            modelBuilder.Entity("Editoria.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Advertisement", b =>
                {
                    b.HasOne("Editoria.Models.Entities.Issue", "Issue")
                        .WithMany("Advertisements")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Article", b =>
                {
                    b.HasOne("Editoria.Models.Entities.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Editoria.Models.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Editoria.Models.Entities.Issue", "Issue")
                        .WithMany("Articles")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Editoria.Models.Entities.ArticleTag", b =>
                {
                    b.HasOne("Editoria.Models.Entities.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Editoria.Models.Entities.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Issue", b =>
                {
                    b.HasOne("Editoria.Models.Entities.Newspaper", "Newspaper")
                        .WithMany("Issues")
                        .HasForeignKey("NewspaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Newspaper");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Newspaper", b =>
                {
                    b.HasOne("Editoria.Models.Entities.Editor", "Editor")
                        .WithOne("Newspaper")
                        .HasForeignKey("Editoria.Models.Entities.Newspaper", "EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Article", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Editor", b =>
                {
                    b.Navigation("Newspaper")
                        .IsRequired();
                });

            modelBuilder.Entity("Editoria.Models.Entities.Issue", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Newspaper", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("Editoria.Models.Entities.Tag", b =>
                {
                    b.Navigation("ArticleTags");
                });
#pragma warning restore 612, 618
        }
    }
}
